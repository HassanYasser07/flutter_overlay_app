
// import 'dart:math';
//
// import 'package:flutter/material.dart';
// import 'package:flutter_overlay_window/flutter_overlay_window.dart';
// import 'package:flutter_overlay_window_example/widgets/control_button.dart';
//
// import 'ball_painter.dart';
//
// class BallGameApp extends StatefulWidget {
//   const BallGameApp({
//     Key? key,
//   }) : super(key: key);
//
//   @override
//   _BallGameState createState() => _BallGameState();
// }
//
// class _BallGameState extends State<BallGameApp> {
//   double lineLength = 250;
//   int maxReflections = 2;
//   Offset whiteBallPosition = const Offset(100, 100);
//   Offset redBallPosition = const Offset(100, 250);
//   bool isWhiteBallActive = true;
//   Offset? aimPoint;
//   double ballRadius = 20.0;
//   double tableWidth = 350;
//   double tableHeight = 300;
//   Offset? initialTouchPosition;
//   double cueAngle = 0.3;
//   double resizeThreshold = 50;
//   double angleStep = 0.09;
//   bool isResizing = false;
//   bool isResizingBottomRight = false;
//   bool isResizingTopLeft = false;
//   bool showControls = false;
//   double reflectionAngleAdjustment = 0.0;
//   bool isDraggingBall = false;
//   bool isCueRotating = false;
//   double initialCueAngle = 0.0;
//   Offset? initialCueTouchPosition;
//   double topOffset = 100;
//   double leftOffset = 100;
//
//   bool isOverlayInteractive = true;
//   Future<void> toggleOverlayInteraction() async {
//     setState(() {
//       isOverlayInteractive = !isOverlayInteractive;
//     });
//
//     // Toggle between interactive and non-interactive overlay
//     await FlutterOverlayWindow.updateFlag(
//       isOverlayInteractive ? OverlayFlag.defaultFlag : OverlayFlag.clickThrough,
//     );
//   }
//
//   Future<void> disableOverlay() async {
//     await FlutterOverlayWindow.updateFlag(OverlayFlag.clickThrough);
//   }
//
//   void updateBallPositionsAfterResize() {
//     // Use the actual rendered height of the game area for the bottom boundary
//     final double visibleHeight = MediaQuery.of(context).size.height * 0.79;
//     setState(() {
//       whiteBallPosition = Offset(
//         whiteBallPosition.dx.clamp(ballRadius, tableWidth - ballRadius),
//         whiteBallPosition.dy.clamp(ballRadius, visibleHeight - ballRadius),
//       );
//       redBallPosition = Offset(
//         redBallPosition.dx.clamp(ballRadius, tableWidth - ballRadius),
//         redBallPosition.dy.clamp(ballRadius, visibleHeight - ballRadius),
//       );
//     });
//   }
//
//   void updateOverlaySize(int newWidth, int newHeight) async {
//     bool? success = await FlutterOverlayWindow.resizeOverlay(
//       newWidth,
//       newHeight,
//       false, // تمكين السحب داخل النافذة
//     );
//
//     if (success == true) {
//       setState(() {
//         tableWidth = newWidth.toDouble();
//         tableHeight = newHeight.toDouble();
//       });
//     }
//   }
//
//   void _toggleControls() {
//     setState(() {
//       showControls = !showControls; // ✅ تبديل الحالة عند الضغط
//     });
//   }
//
//   void _increaseAngle() {
//     setState(() {
//       cueAngle += angleStep;
//     });
//   }
//
//   void _decreaseAngle() {
//     setState(() {
//       cueAngle = (cueAngle - angleStep) % (2 * pi);
//     });
//   }
//
//   void _adjustReflectionAngle() {
//     setState(() {
//       reflectionAngleAdjustment += 0.1; // تعديل زاوية الانعكاس
//     });
//   }
//
//   void _adjustReflectionAngleNegative() {
//     setState(() {
//       reflectionAngleAdjustment -=
//           0.1; // تعديل زاوية الانعكاس في الاتجاه المعاكس
//     });
//   }
//
//   void _increaseLineLength() {
//     setState(() {
//       lineLength += 20;
//     });
//   }
//
//   void _decreaseLineLength() {
//     setState(() {
//       lineLength -= 20;
//     });
//   }
//
//   void _increaseMaxReflections() {
//     setState(() {
//       maxReflections += 1;
//     });
//   }
//
//   void _decreaseMaxReflections() {
//     setState(() {
//       maxReflections -= 1;
//     });
//   }
//
//   Offset settingsButtonPosition = const Offset(10, 10);
//   Offset chartButtonPosition = const Offset(60, 10);
//   bool showgrid = true;
//   @override
//   Widget build(BuildContext context) {
//     return Center(
//       child: FittedBox(
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Row(
//               children: [
//                 IconButton(
//                   icon: Icon(Icons.close),
//                   onPressed: () async {
//                     await FlutterOverlayWindow.closeOverlay();
//                   },
//                 ),
//                 IconButton(
//                   icon: Icon(
//                       showControls ? Icons.visibility_off : Icons.settings),
//                   onPressed:
//                       _toggleControls, // ✅ الآن يتحكم في الأزرار داخل اللعبة نفسها
//                 ),
//               ],
//             ),
//             GestureDetector(
//               onPanUpdate: (details) {
//                 setState(() {
//                   if (initialTouchPosition != null) {
//                     if (isCueRotating) {
//                       Offset center = whiteBallPosition;
//                       Offset newTouch = details.localPosition;
//
//                       double newAngle = atan2(
//                           newTouch.dy - center.dy, newTouch.dx - center.dx);
//                       double oldAngle = atan2(
//                           initialCueTouchPosition!.dy - center.dy,
//                           initialCueTouchPosition!.dx - center.dx);
//
//                       double angleDifference = newAngle - oldAngle ;
//                       cueAngle = (initialCueAngle + angleDifference) % (2 * pi);
//                     }
//
//                     else if (isResizing) {
//
//
//                      // إذا كان المستخدم يقوم بتغيير الحجم فقط
//                       double deltaX =details.localPosition.dx - initialTouchPosition!.dx;
//                       double deltaY =details.localPosition.dy - initialTouchPosition!.dy;
//
//                       tableWidth = (tableWidth + deltaX).clamp(150, 400);
//                       tableHeight = (tableHeight + deltaY).clamp(200, 800);
//                       updateOverlaySize(
//                           tableWidth.toInt(), tableHeight.toInt());
//                      updateBallPositionsAfterResize();
//                       initialTouchPosition = details.localPosition;
//                     }
//
//
//
//
//                     else if (isDraggingBall) {
//                       // ✅ فقط إذا كان المستخدم يسحب الكرة نفسها
//                       if (isWhiteBallActive) {
//                         // تحريك الكرة البيضاء فقط إذا كان السحب بدأ من عليها
//                         final newWhitePosition =
//                             whiteBallPosition + details.delta;
//                         whiteBallPosition = Offset(
//                           newWhitePosition.dx
//                               .clamp(ballRadius, tableWidth - ballRadius),
//                           newWhitePosition.dy
//                               .clamp(ballRadius, tableHeight - ballRadius),
//                         );
//                       } else {
//                         // تحريك الكرة الحمراء فقط إذا كان السحب بدأ من عليها
//                         final newRedPosition = redBallPosition + details.delta;
//                         redBallPosition = Offset(
//                           newRedPosition.dx
//                               .clamp(ballRadius, tableWidth - ballRadius),
//                           newRedPosition.dy
//                               .clamp(ballRadius, tableHeight - ballRadius),
//                         );
//                       }
//                     }
//                   }
//                 });
//               },
//               onPanStart: (details) {
//                 setState(() {
//                   initialTouchPosition = details.localPosition;
//                   double dx = details.localPosition.dx;
//                   double dy = details.localPosition.dy;
//                   double distanceFromWhiteBall =
//                       (details.localPosition - whiteBallPosition).distance;
//
//                   // التحقق مما إذا كانت النقطة داخل حدود الكرة البيضاء
//                   if ((dx - whiteBallPosition.dx).abs() < ballRadius &&
//                       (dy - whiteBallPosition.dy).abs() < ballRadius) {
//                     isWhiteBallActive = true;
//                     isDraggingBall =
//                         true; // ✅ السماح بالسحب فقط إذا كان المستخدم بدأ من الكرة
//                   }
//                   else if (dx > tableWidth - resizeThreshold &&
//                       dy > tableHeight - resizeThreshold) {
//                     isResizing = true;
//                     isResizingBottomRight = true; // تغيير من الأسفل فقط
//                     isResizingTopLeft = false;
//                   } else if (dx < resizeThreshold && dy < resizeThreshold) {
//                     isResizing = true;
//                     isResizingBottomRight = false;
//                     isResizingTopLeft = true; // تغيير من الأعلى فقط
//                   }
//
//                   // التحقق مما إذا كانت النقطة داخل حدود الكرة الحمراء
//                   else if ((dx - redBallPosition.dx).abs() < ballRadius &&
//                       (dy - redBallPosition.dy).abs() < ballRadius) {
//                     isWhiteBallActive = false;
//                     isDraggingBall =
//                         true; // ✅ السماح بالسحب فقط إذا كان المستخدم بدأ من الكرة
//                   }
//                   // التحقق مما إذا كانت نقطة اللمس داخل منطقة تغيير الحجم (أسفل اليمين)
//                   else if (dx > tableWidth - resizeThreshold &&
//                       dy > tableHeight - resizeThreshold) {
//                     isResizing = true;
//                   }
//                   // التحقق مما إذا كانت نقطة اللمس داخل الزاوية العلوية اليسرى
//                   else if (dx < resizeThreshold && dy < resizeThreshold) {
//                     isResizing = true;
//                   } else if (distanceFromWhiteBall > ballRadius &&
//                       distanceFromWhiteBall <= ballRadius + 150) {
//                     isCueRotating = true; // ✅ تفعيل تحريك العصا
//                     isWhiteBallActive = false;
//                     //  isRedBallActive = false;     //////////////////////////////////////////////////////////////////////
//                     //  isResizingTable = false;
//                     initialCueTouchPosition =
//                         details.localPosition; // ✅ تخزين نقطة اللمس الأولية
//                     initialCueAngle = cueAngle; // ✅ تخزين الزاوية الأولية للعصا
//                   } else {
//                     isResizing = false;
//                     isDraggingBall =
//                         false; // ✅ السماح بالسحب فقط إذا كان المستخدم بدأ من الكرة
//                   }
//                 });
//               },
//               onPanEnd: (details) {
//                 setState(() {
//
//                   isResizing = false;
//                   isDraggingBall = false; // ✅ السماح بالسحب فقط إذا كان المستخدم بدأ من الكرة
//                   isCueRotating = false;
//                   isResizingBottomRight = false;
//                   isResizingTopLeft = false;
//                   initialCueTouchPosition = null;
//                   initialTouchPosition = null;
//
//                 });
//               },
//               child: Stack(
//                 children: [
//                   CustomPaint(
//                     size: Size(tableWidth, tableHeight),
//                     painter: BallPainter(
//                       whiteBallPosition: whiteBallPosition,
//                       redBallPosition: redBallPosition,
//                       aimPoint: aimPoint,
//                       cueAngle: cueAngle,
//                       reflectionAngleAdjustment: reflectionAngleAdjustment,
//                       ballRadius: ballRadius,
//                       lineLength: lineLength,
//                       maxReflections: maxReflections,
//                     ),
//                   ),
//
//                   Positioned(
//                     bottom: 0,
//                     right: 0,
//                     child: Container(
//                       width: resizeThreshold,
//                       height: resizeThreshold,
//                       color: Colors.blue.withValues(alpha: 0.5),
//                     ),
//                   ),
//                   Positioned(
//                     top: 0,
//                     left: 0,
//                     child: Container(
//                       width: resizeThreshold,
//                       height: resizeThreshold,
//                       color: Colors.red.withValues(alpha: 0.5),
//                     ),
//                   ),
//                   Visibility(
//                     visible: showControls,
//                     child: Positioned(
//                       bottom: 10,
//                       left: 10,
//                       right: 10,
//                       child: Column(
//                         children: [
//                           Wrap(
//                             spacing: 5,
//                             runSpacing: 5,
//                             alignment: WrapAlignment.center,
//                             children: [
//                               ControlButton(
//                                 icon: Icons.add_circle,
//                                 label: 'Enlarge',
//                                 onPressed: () {
//                                   setState(() {
//                                     ballRadius = (ballRadius + 5).clamp(10, 35);
//                                   });
//                                 },
//                               ),
//                               ControlButton(
//                                 icon: Icons.remove_circle,
//                                 label: 'Shrink',
//                                 onPressed: () {
//                                   setState(() {
//                                     ballRadius = (ballRadius - 5).clamp(10, 35);
//                                   });
//                                 },
//                               ),
//                               ControlButton(
//                                 icon: Icons.rotate_right,
//                                 label: 'Increase Angle',
//                                 onPressed: _increaseAngle,
//                               ),
//                               ControlButton(
//                                 icon: Icons.rotate_left,
//                                 label: 'Decrease Angle',
//                                 onPressed: _decreaseAngle,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_upward,
//                                 label: 'Reflect',
//                                 onPressed: _adjustReflectionAngle,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_downward,
//                                 label: 'Reflect',
//                                 onPressed: _adjustReflectionAngleNegative,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_upward,
//                                 label: 'Increase line len',
//                                 onPressed: _increaseLineLength,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_downward,
//                                 label: 'Decrease line len',
//                                 onPressed: _decreaseLineLength,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_upward,
//                                 label: 'Increase max ref',
//                                 onPressed: _increaseMaxReflections,
//                               ),
//                               ControlButton(
//                                 icon: Icons.arrow_downward,
//                                 label: 'Decrease max ref',
//                                 onPressed: _decreaseMaxReflections,
//                               ),
//                             ],
//                           ),
//                         ],
//                       ),
//                     ),
//                   ),
//                 ],
//               ),
//             )
//           ],
//         ),
//       ),
//     );
//   }
// }
//
//
// //


//   void updateOverlaySize(int newWidth, int newHeight) async {
//     bool? success = await FlutterOverlayWindow.resizeOverlay(
//       newWidth,
//       newHeight,
//       false, // تمكين السحب داخل النافذة
//     );
//
//     if (success == true) {
//       setState(() {
//         tableWidth = newWidth.toDouble();
//         tableHeight = newHeight.toDouble();
//       });
//     }
//   }


import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_overlay_window/flutter_overlay_window.dart';
import 'package:flutter_overlay_window_example/widgets/control_button.dart';

import 'ball_painter.dart';

class BallGameApp extends StatefulWidget {
  const BallGameApp({
    Key? key,
  }) : super(key: key);

  @override
  _BallGameState createState() => _BallGameState();
}

class _BallGameState extends State<BallGameApp> {
  double lineLength = 250;
  int maxReflections = 2;
  Offset yellowBallPosition = const Offset(100, 100);
  Offset redBallPosition = const Offset(100, 250);
  bool isYellowBallActive = true;
  Offset? aimPoint;
  double ballRadius = 20.0;
  double tableWidth = 200;
  double tableHeight = 200;
  Offset? initialTouchPosition;
  double cueAngle = 0.3;
  double resizeThreshold = 50;
  double angleStep = 0.09;
  bool isResizing = false;
  bool isResizingBottomRight = false;
  bool isResizingTopLeft = false;
  bool showControls = false;
  double reflectionAngleAdjustment = 0.0;
  bool isDraggingBall = false;
  bool isCueRotating = false;
  double initialCueAngle = 0.0;
  Offset? initialCueTouchPosition;

  bool isOverlayInteractive = true;
  Offset cueStart = const Offset(100, 100);
  double cueLength = 100;
  bool isFirstResize = true;
//DateTime? expirationDate;

  @override
  void initState() {
    updateBallPositionsAfterResize();
    super.initState();
   //   checkAppExpiration();

  }

// Future<void> checkAppExpiration() async {
//   // Set your expiration date here (year, month, day, hour, minute)
//   expirationDate = DateTime(2025, 3, 18, 5, 37); // Change this to your desired date
//
//   if (DateTime.now().isAfter(expirationDate!)) {
//     showDialog(
//       context: context,
//       barrierDismissible: false,
//       builder: (BuildContext context) {
//         return AlertDialog(
//           title: Text('تنبيه'),
//           content: Text('انتهت صلاحية التطبيق'),
//           actions: <Widget>[
//             TextButton(
//               child: Text('إغلاق'),
//               onPressed: () {
//                 SystemNavigator.pop(); // This will close the app
//               },
//             ),
//           ],
//         );
//       },
//     );
//   }
// }

  void _resizeOverlayWindow() async {
    try {
      int newWidth = tableWidth.toInt().clamp(200, 600);  // حد أدنى 200 وحد أقصى 600
      int newHeight = tableHeight.toInt().clamp(200, 600);

      print("Resizing overlay to: width=$newWidth, height=$newHeight"); // للتصحيح

      bool? success = await FlutterOverlayWindow.resizeOverlay(
         newWidth,
         newHeight,
         false,

      );

      print("Resize success: $success");
    } catch (e) {
      print("Error resizing overlay: $e");
    }
  }

Future<void> updateOverlaySize(int newWidth, int newHeight) async {
  if (!mounted) return;
  
  // Add minimum size constraints
  if (newWidth < 150) newWidth = 150;
  if (newHeight < 200) newHeight = 200;
  
  try {
    bool? success = await FlutterOverlayWindow.resizeOverlay(
      newWidth,
      newHeight,
      true, // Enable dragging within window
    );

    if (success == true && mounted) {
      setState(() {
        tableWidth = newWidth.toDouble();
        tableHeight = newHeight.toDouble();
        updateBallPositionsAfterResize();
      });
    }
  } catch (e) {
    print('Error resizing overlay: $e');
  }
}

  //
  // void _resizeOverlayWindow() async {
  //   await FlutterOverlayWindow.resizeOverlay(
  //      tableWidth.toInt(),
  //      tableHeight.toInt(),
  //     false,
  //   );
  // }

// Future<void> updateOverlaySize(int newWidth, int newHeight) async {
//   if (!mounted) return;
  
//   // Add minimum size constraints
//   if (newWidth < 150) newWidth = 150;
//   if (newHeight < 200) newHeight = 200;
  
//   try {
//     bool? success = await FlutterOverlayWindow.resizeOverlay(
//       newWidth,
//       newHeight,
//       true, // Enable dragging within window
//     );

//     if (success == true && mounted) {
//       setState(() {
//         tableWidth = newWidth.toDouble();
//         tableHeight = newHeight.toDouble();
//         updateBallPositionsAfterResize();
//       });
//     }
//   } catch (e) {
//     print('Error resizing overlay: $e');
//   }
// }


  void _startCueRotation(DragStartDetails details) {
    Offset touchPoint = details.localPosition;

    // 🔹 تحديد نقطة بداية العصا خارج الكرة بمسافة صغيرة (مثلاً 10 بكسل)
    double offsetFromBall = ballRadius + 10;
    Offset cueStart = Offset(
      yellowBallPosition.dx + cos(cueAngle) * offsetFromBall,
      yellowBallPosition.dy + sin(cueAngle) * offsetFromBall,
    );

    Offset cueEnd = Offset(
      cueStart.dx + cos(cueAngle) * (cueLength - offsetFromBall),
      cueStart.dy + sin(cueAngle) * (cueLength - offsetFromBall),
    );

    // 🔹 حساب المسافة بين نقطة اللمس وخط العصا
    double distanceToCue = _distanceFromPointToLine(touchPoint, cueStart, cueEnd);

    if (distanceToCue <= 10) { // السماح بتحريك العصا فقط إذا لمسها المستخدم
      setState(() {
        isCueRotating = true;
        initialCueTouchPosition = details.localPosition;
        initialCueAngle = cueAngle;
      });
    }
  }

// 🔹 دالة لحساب المسافة بين نقطة وخط مستقيم
  double _distanceFromPointToLine(Offset point, Offset lineStart, Offset lineEnd) {
    double A = point.dx - lineStart.dx;
    double B = point.dy - lineStart.dy;
    double C = lineEnd.dx - lineStart.dx;
    double D = lineEnd.dy - lineStart.dy;

    double dot = A * C + B * D;
    double lengthSquared = C * C + D * D;
    double param = (lengthSquared != 0) ? (dot / lengthSquared) : -1;

    double nearestX, nearestY;

    if (param < 0) {
      nearestX = lineStart.dx;
      nearestY = lineStart.dy;
    } else if (param > 1) {
      nearestX = lineEnd.dx;
      nearestY = lineEnd.dy;
    } else {
      nearestX = lineStart.dx + param * C;
      nearestY = lineStart.dy + param * D;
    }

    double dx = point.dx - nearestX;
    double dy = point.dy - nearestY;
    return sqrt(dx * dx + dy * dy);
  }




  void _updateCueRotation(DragUpdateDetails details) {
    if (!isCueRotating) return; // ✅ عدم تحديث الزاوية إذا لم يكن المستخدم يدور العصا

    setState(() {
      Offset center = yellowBallPosition;
      Offset newTouch = details.localPosition;

      double newAngle = atan2(newTouch.dy - center.dy, newTouch.dx - center.dx);
      double oldAngle = atan2(
          initialCueTouchPosition!.dy - center.dy,
          initialCueTouchPosition!.dx - center.dx);

      double angleDifference = newAngle - oldAngle;
      cueAngle = (initialCueAngle + angleDifference) % (2 * pi);
    });
  }

  void _endCueRotation(DragEndDetails details) {
    setState(() {
      isCueRotating = false;
    });
  }


  Future<void> toggleOverlayInteraction() async {
    setState(() {
      isOverlayInteractive = !isOverlayInteractive;
    });

    // Toggle between interactive and non-interactive overlay
    await FlutterOverlayWindow.updateFlag(
      isOverlayInteractive ? OverlayFlag.defaultFlag : OverlayFlag.clickThrough,
    );
  }

  Future<void> disableOverlay() async {
    await FlutterOverlayWindow.updateFlag(OverlayFlag.clickThrough);
  }

  void updateBallPositionsAfterResize() {
    setState(() {
      yellowBallPosition = Offset(
        yellowBallPosition.dx.clamp(ballRadius, tableWidth - ballRadius),
        yellowBallPosition.dy.clamp(ballRadius, tableHeight - ballRadius),
      );
      redBallPosition = Offset(
        redBallPosition.dx.clamp(ballRadius, tableWidth - ballRadius),
        redBallPosition.dy.clamp(ballRadius, tableHeight - ballRadius),
      );


      // تأكد من عدم تجاوز الكرة حدود الطاولة بعد التغيير
      cueStart = Offset(
        cueStart.dx.clamp(ballRadius, tableWidth - ballRadius),
        cueStart.dy.clamp(ballRadius, tableHeight - ballRadius),
      );
    });
  }



  void _toggleControls() {
    setState(() {
      showControls = !showControls; // ✅ تبديل الحالة عند الضغط
    });
  }

  void _increaseAngle() {
    setState(() {
      cueAngle += angleStep;
    });
  }

  void _decreaseAngle() {
    setState(() {
      cueAngle = (cueAngle - angleStep) % (2 * pi);
    });
  }

  void _adjustReflectionAngle() {
    setState(() {
      reflectionAngleAdjustment += 0.1; // تعديل زاوية الانعكاس
    });
  }

  void _adjustReflectionAngleNegative() {
    setState(() {
      reflectionAngleAdjustment -=
      0.1; // تعديل زاوية الانعكاس في الاتجاه المعاكس
    });
  }

  void _increaseLineLength() {
    setState(() {
      lineLength += 20;
    });
  }

  void _decreaseLineLength() {
    setState(() {
      lineLength -= 20;
    });
  }

  void _increaseMaxReflections() {
    setState(() {
      maxReflections += 1;
    });
  }

  void _decreaseMaxReflections() {
    setState(() {
      maxReflections -= 1;
    });
  }

  Offset settingsButtonPosition = const Offset(10, 10);
  Offset chartButtonPosition = const Offset(60, 10);
  bool showgrid = true;

  double topOffset = 100;
  double leftOffset = 100;


  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Positioned(
          left: leftOffset,
          top: topOffset,
          child: Container(
            color: Colors.white.withValues(alpha: .03),
            child: Stack(
              children: [
                FittedBox(
                  child: Column(
                    children: [
                      Row(
                        children: [
                          IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () async {
                              await FlutterOverlayWindow.closeOverlay();
                            },
                          ),
                          IconButton(
                            icon: Icon(showControls
                                ? Icons.visibility_off
                                : Icons.settings),
                            onPressed:
                            _toggleControls, // ✅ الآن يتحكم في الأزرار داخل اللعبة نفسها
                          ),
                        ],
                      ),
                      Center(
                        child: GestureDetector(
                          onPanUpdate: (details) {
                            setState(() {

                              _updateCueRotation(details );

                              if (isDraggingBall) {
                                if (isYellowBallActive) {
                                  final newWhitePosition =
                                      yellowBallPosition + details.delta;
                                  yellowBallPosition = Offset(
                                    newWhitePosition.dx.clamp(
                                        ballRadius, tableWidth - ballRadius),
                                    newWhitePosition.dy.clamp(
                                        ballRadius, tableHeight - ballRadius),
                                  );
                                } else {
                                  final newRedPosition =
                                      redBallPosition + details.delta;
                                  redBallPosition = Offset(
                                    newRedPosition.dx.clamp(
                                        ballRadius, tableWidth - ballRadius),
                                    newRedPosition.dy.clamp(
                                        ballRadius, tableHeight - ballRadius),
                                  );
                                }
                              }
                            });
                          },
                          onPanStart: (details) {
                            setState(() {
                              _startCueRotation(details);
                              double dx = details.localPosition.dx;
                              double dy = details.localPosition.dy;

                              if ((dx - yellowBallPosition.dx).abs() <
                                  ballRadius &&
                                  (dy - yellowBallPosition.dy).abs() <
                                      ballRadius) {
                                isYellowBallActive = true;
                                isDraggingBall = true;
                              } else if ((dx - redBallPosition.dx).abs() <
                                  ballRadius &&
                                  (dy - redBallPosition.dy).abs() <
                                      ballRadius) {
                                isYellowBallActive = false;
                                isDraggingBall = true;
                              }
                            });
                          },
                          onPanEnd: (details) {
                            setState(() {
                              _endCueRotation(details);
                              isDraggingBall = false;

                            });
                          },
                          child: Stack(
                            children: [
                              CustomPaint(
                                size: Size(tableWidth, tableHeight),
                                painter: BallPainter(
                                  whiteBallPosition: yellowBallPosition,
                                  redBallPosition: redBallPosition,
                                  aimPoint: aimPoint,
                                  cueAngle: cueAngle,
                                  reflectionAngleAdjustment: reflectionAngleAdjustment,
                                  ballRadius: ballRadius,
                                  lineLength: lineLength,
                                  maxReflections: maxReflections,
                                ),
                              ),
                              Visibility(
                                visible: showControls,
                                child: Positioned(
                                  bottom: 10,
                                  left: 10,
                                  right: 10,
                                  child: Column(
                                    children: [
                                      Wrap(
                                        spacing: 5,
                                        runSpacing: 5,
                                        alignment: WrapAlignment.center,
                                        children: [
                                          ControlButton(
                                            icon: Icons.add_circle,
                                            label: 'Enlarge',
                                            onPressed: () {
                                              setState(() {
                                                ballRadius = (ballRadius + 5)
                                                    .clamp(10, 35);
                                              });
                                            },
                                          ),
                                          ControlButton(
                                            icon: Icons.remove_circle,
                                            label: 'Shrink',
                                            onPressed: () {
                                              setState(() {
                                                ballRadius = (ballRadius - 5)
                                                    .clamp(10, 35);
                                              });
                                            },
                                          ),
                                          ControlButton(
                                            icon: Icons.rotate_right,
                                            label: 'Increase Angle',
                                            onPressed: _increaseAngle,
                                          ),
                                          ControlButton(
                                            icon: Icons.rotate_left,
                                            label: 'Decrease Angle',
                                            onPressed: _decreaseAngle,
                                          ),

                                          ControlButton(
                                            icon: Icons.arrow_upward,
                                            label: 'Increase line len',
                                            onPressed: _increaseLineLength,
                                          ),
                                          ControlButton(
                                            icon: Icons.arrow_downward,
                                            label: 'Decrease line len',
                                            onPressed: _decreaseLineLength,
                                          ),
                                          ControlButton(
                                            icon: Icons.arrow_upward,
                                            label: 'Increase max ref',
                                            onPressed: _increaseMaxReflections,
                                          ),
                                          ControlButton(
                                            icon: Icons.arrow_downward,
                                            label: 'Decrease max ref',
                                            onPressed: _decreaseMaxReflections,
                                          ),
                                          ControlButton(
                                            icon: Icons.arrow_upward,
                                            label: 'Reflect',
                                            onPressed: _adjustReflectionAngle,
                                          ),
                                          ControlButton(
                                            icon: Icons.arrow_downward,
                                            label: 'Reflect',
                                            onPressed:
                                            _adjustReflectionAngleNegative,
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Positioned(
                  bottom: 0,
                  right: 0,
                  child: GestureDetector(
                    onPanUpdate: (details) {
                      setState(() {
                        tableWidth += details.delta.dx;
                        tableHeight += details.delta.dy;
                        tableWidth =
                            tableWidth.clamp(ballRadius + 30, double.infinity);
                        tableHeight =
                            tableHeight.clamp(ballRadius + 30, 600);
                      });
                      updateBallPositionsAfterResize();
                   //   updateOverlaySize(tableWidth.toInt(), tableHeight.toInt()); // تحديث حجم النافذة العائمة


                    },
                    child: Container(
                      width: 35,
                      height: 35,
                      color: Colors.red,
                    ),
                  ),
                ),
                Positioned(
                  top: 0,
                  left: 0,
                  child: GestureDetector(
                    onPanUpdate: (details) {
                      setState(() {
                        double newHeight = tableHeight - details.delta.dy;
                        double newWidth = tableWidth - details.delta.dx;

                        if (newHeight > 50) {
                          topOffset += details.delta.dy;
                          tableHeight = newHeight;
                        }
                        if (newWidth > 50) {
                          leftOffset += details.delta.dx;
                          tableWidth = newWidth;
                        }
                        tableWidth =
                            tableWidth.clamp(ballRadius + 30, 350);
                        tableHeight =
                            tableHeight.clamp(ballRadius + 30, 600);

                      });
                      updateBallPositionsAfterResize();
                    //  updateOverlaySize(tableWidth.toInt(), tableHeight.toInt()); // تحديث حجم النافذة العائمة

                    },
                    child: Container(
                      width: 35,
                      height: 35,
                      color: Colors.green,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
